from py3dtilers.TilesetReader.TilesetReader import TilesetTiler
from py3dtilers.TilesetReader.tileset_tree import TilesetTree
from py3dtilers.Common.feature import Feature, FeatureList

from pySunlight import Vec3d, TriangleSoup, Triangle

# This file read and convert py3DTiler type to Sunlight type


def convert_numpy_to_vec3(coordinate_array):
    """
    Convert numpy array of size 3 to a Vec3D for sunlight usage
    :param coordinate_array: array of coordinate (x, y and z) coming from numpy
    :return: the conversion in Vec3D of a given coordinate array
    """
    return Vec3d(coordinate_array[0], coordinate_array[1], coordinate_array[2])


def convert_to_triangle_soup(tiler_triangle_Soup, tile_name):
    """
    Convert py3DTilers triangle soup to Sunlight triangle soup
    :param tiler_triangle_Soup: triangle soup generated by py3DTiler
    :param tile_name: tile name read by py3DTiler to generate the triangle soup
    :return: Sunlight triangle soup converted from py3DTiler triangle soup
    """
    triangle_soup = TriangleSoup()

    for id, triangle in enumerate(tiler_triangle_Soup):
        a = convert_numpy_to_vec3(triangle[0])
        b = convert_numpy_to_vec3(triangle[1])
        c = convert_numpy_to_vec3(triangle[2])

        triangle_soup.append(Triangle(a, b, c, str(id), tile_name))

    return triangle_soup


def get_triangle_soup_from_tileset():
    """
    The function `get_triangle_soup_from_tileset` reads and merges tiles from a folder, transforms 
    buildings into triangle soup, and returns the triangle soup along with the tile name.
    :return: a triangle soup compatible with Sunlight
    """
    tiler = TilesetTiler()

    # Read all tiles in a folder
    tiler.parse_command_line()

    # Merge all tiles to create a TileSet
    tileset = tiler.read_and_merge_tilesets()

    # Read all bounding boxes in a tileset
    bboxes = []
    for tile in tileset.get_root_tile().attributes['children']:
        bboxes.append(tile.attributes['boundingVolume'])

    tileset_tree = TilesetTree(tileset, tiler.tileset_of_root_tiles)

    # Transform building to triangle soup
    # TODO check if i need to do a recursive check
    all_triangles = []
    for root_node in tileset_tree.root_nodes:
        feature_list = root_node.feature_list

        # Triangles list
        for feature in feature_list:
            triangles = feature.get_geom_as_triangles()
            all_triangles.extend(triangles)

    return convert_to_triangle_soup(all_triangles, "")

        # # Build a feature with a triangle level
        # triangles_as_features = []
        # for j, triangle in enumerate(all_triangles):
        #     print(f"Triangle variables : {triangle}")
        #     triangle_as_feature = Feature(f'triangle_{j}')
        #     triangle_as_feature.geom.triangles.append(list(triangle))
        #     triangles_as_features.append(triangle_as_feature)
