from py3dtilers.TilesetReader.TilesetReader import TilesetTiler
from py3dtilers.TilesetReader.tileset_tree import TilesetTree
from py3dtiles.tile import Tile
from py3dtilers.TilesetReader.tile_to_feature import TileToFeatureList

from pySunlight import Vec3d, TriangleSoup, Triangle

# This file read and convert py3DTiler type to Sunlight type


def convert_numpy_to_vec3(coordinate_array):
    """
    Convert numpy array of size 3 to a Vec3D for sunlight usage
    :param coordinate_array: array of coordinate (x, y and z) coming from numpy
    :return: the conversion in Vec3D of a given coordinate array
    """
    return Vec3d(coordinate_array[0], coordinate_array[1], coordinate_array[2])


def convert_to_sunlight_triangle_soup(tiler_triangle_Soup, tile_name, feature_id):
    """
    Convert py3DTilers triangle soup to Sunlight triangle soup
    :param tiler_triangle_Soup: triangle soup generated by py3DTiler
    :param tile_name: tile name read by py3DTiler to generate the triangle soup
    :return: Sunlight triangle soup converted from py3DTiler triangle soup
    """
    triangle_soup = TriangleSoup()

    for id, triangle in enumerate(tiler_triangle_Soup):
        a = convert_numpy_to_vec3(triangle[0])
        b = convert_numpy_to_vec3(triangle[1])
        c = convert_numpy_to_vec3(triangle[2])

        triangle_soup.append(Triangle(a, b, c, f"{tile_name}_{feature_id}_{id}", tile_name))

    return triangle_soup


def read_tileset():
    """
    The function "read_tileset" reads and merges multiple tilesets from a folder specified through
    command line arguments.
    :return: the merged TileSet.
    """
    tiler = TilesetTiler()

    # Read all tiles in a folder using command line arguments
    tiler.parse_command_line()

    # Merge all tiles to create one TileSet
    return tiler.read_and_merge_tilesets()


def read_tileset_tree():
    """
    The function reads and merges tiles from a folder specified through
    command line arguments and build a TilesetTree.
    :return: a TilesetTree object.
    """
    tiler = TilesetTiler()

    # Read all tiles in a folder using command line arguments
    tiler.parse_command_line()

    # Merge all tiles to create one TileSet
    tileset = tiler.read_and_merge_tilesets()

    return TilesetTree(tileset, tiler.tileset_of_root_tiles)


def get_triangle_soup_from_tileset(tileset_tree: TilesetTree):
    """
    The function `get_triangle_soup_from_tileset` reads and merges tiles from a folder, transforms
    buildings into triangle soup, and returns the triangle soup along with the tile name.
    :return: a triangle soup compatible with Sunlight
    """
    # Transform building to triangle soup
    all_triangles = []
    for i, root_node in enumerate(tileset_tree.root_nodes):
        feature_list = root_node.feature_list

        # Triangles list
        for feature in feature_list:
            triangles = feature.get_geom_as_triangles()
            all_triangles.extend(triangles)

    return convert_to_sunlight_triangle_soup(all_triangles, f"{i}.b3dm", "")


def get_triangle_soup_from_tile(tile: Tile):
    """
    The function `get_triangle_soup_from_tileset` reads and merges tiles from a folder, transforms
    buildings into triangle soup, and returns the triangle soup along with the tile name.
    :return: a triangle soup compatible with Sunlight
    """

    # Convert to feature list and add tile offset in all coordinates
    feature_list = TileToFeatureList(tile)
    feature_list.translate_features(tile.get_transform()[12:15])

    all_triangles = TriangleSoup()
    for feature in feature_list:

        # Convert py3DTiler triangles to sunlight triangle
        triangles = feature.get_geom_as_triangles()
        converted_triangles = convert_to_sunlight_triangle_soup(triangles, tile.get_content_uri(), feature.get_id())

        for triangle in converted_triangles:
            all_triangles.push_back(triangle)

    return all_triangles
